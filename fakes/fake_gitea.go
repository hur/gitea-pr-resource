// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.gitea.io/sdk/gitea"
	resource "github.com/hur/gitea-pr-resource"
)

type FakeGitea struct {
	GetPullRequestStub        func(string, string) (*resource.PullRequest, error)
	getPullRequestMutex       sync.RWMutex
	getPullRequestArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getPullRequestReturns struct {
		result1 *resource.PullRequest
		result2 error
	}
	getPullRequestReturnsOnCall map[int]struct {
		result1 *resource.PullRequest
		result2 error
	}
	ListModifiedFilesStub        func(int64) ([]string, error)
	listModifiedFilesMutex       sync.RWMutex
	listModifiedFilesArgsForCall []struct {
		arg1 int64
	}
	listModifiedFilesReturns struct {
		result1 []string
		result2 error
	}
	listModifiedFilesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	ListPullRequestsStub        func(gitea.StateType) ([]*resource.PullRequest, error)
	listPullRequestsMutex       sync.RWMutex
	listPullRequestsArgsForCall []struct {
		arg1 gitea.StateType
	}
	listPullRequestsReturns struct {
		result1 []*resource.PullRequest
		result2 error
	}
	listPullRequestsReturnsOnCall map[int]struct {
		result1 []*resource.PullRequest
		result2 error
	}
	PostCommentStub        func(string, string) error
	postCommentMutex       sync.RWMutex
	postCommentArgsForCall []struct {
		arg1 string
		arg2 string
	}
	postCommentReturns struct {
		result1 error
	}
	postCommentReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateCommitStatusStub        func(string, string, string, string, string, string) error
	updateCommitStatusMutex       sync.RWMutex
	updateCommitStatusArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 string
	}
	updateCommitStatusReturns struct {
		result1 error
	}
	updateCommitStatusReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitea) GetPullRequest(arg1 string, arg2 string) (*resource.PullRequest, error) {
	fake.getPullRequestMutex.Lock()
	ret, specificReturn := fake.getPullRequestReturnsOnCall[len(fake.getPullRequestArgsForCall)]
	fake.getPullRequestArgsForCall = append(fake.getPullRequestArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetPullRequestStub
	fakeReturns := fake.getPullRequestReturns
	fake.recordInvocation("GetPullRequest", []interface{}{arg1, arg2})
	fake.getPullRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGitea) GetPullRequestCallCount() int {
	fake.getPullRequestMutex.RLock()
	defer fake.getPullRequestMutex.RUnlock()
	return len(fake.getPullRequestArgsForCall)
}

func (fake *FakeGitea) GetPullRequestCalls(stub func(string, string) (*resource.PullRequest, error)) {
	fake.getPullRequestMutex.Lock()
	defer fake.getPullRequestMutex.Unlock()
	fake.GetPullRequestStub = stub
}

func (fake *FakeGitea) GetPullRequestArgsForCall(i int) (string, string) {
	fake.getPullRequestMutex.RLock()
	defer fake.getPullRequestMutex.RUnlock()
	argsForCall := fake.getPullRequestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGitea) GetPullRequestReturns(result1 *resource.PullRequest, result2 error) {
	fake.getPullRequestMutex.Lock()
	defer fake.getPullRequestMutex.Unlock()
	fake.GetPullRequestStub = nil
	fake.getPullRequestReturns = struct {
		result1 *resource.PullRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeGitea) GetPullRequestReturnsOnCall(i int, result1 *resource.PullRequest, result2 error) {
	fake.getPullRequestMutex.Lock()
	defer fake.getPullRequestMutex.Unlock()
	fake.GetPullRequestStub = nil
	if fake.getPullRequestReturnsOnCall == nil {
		fake.getPullRequestReturnsOnCall = make(map[int]struct {
			result1 *resource.PullRequest
			result2 error
		})
	}
	fake.getPullRequestReturnsOnCall[i] = struct {
		result1 *resource.PullRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeGitea) ListModifiedFiles(arg1 int64) ([]string, error) {
	fake.listModifiedFilesMutex.Lock()
	ret, specificReturn := fake.listModifiedFilesReturnsOnCall[len(fake.listModifiedFilesArgsForCall)]
	fake.listModifiedFilesArgsForCall = append(fake.listModifiedFilesArgsForCall, struct {
		arg1 int64
	}{arg1})
	stub := fake.ListModifiedFilesStub
	fakeReturns := fake.listModifiedFilesReturns
	fake.recordInvocation("ListModifiedFiles", []interface{}{arg1})
	fake.listModifiedFilesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGitea) ListModifiedFilesCallCount() int {
	fake.listModifiedFilesMutex.RLock()
	defer fake.listModifiedFilesMutex.RUnlock()
	return len(fake.listModifiedFilesArgsForCall)
}

func (fake *FakeGitea) ListModifiedFilesCalls(stub func(int64) ([]string, error)) {
	fake.listModifiedFilesMutex.Lock()
	defer fake.listModifiedFilesMutex.Unlock()
	fake.ListModifiedFilesStub = stub
}

func (fake *FakeGitea) ListModifiedFilesArgsForCall(i int) int64 {
	fake.listModifiedFilesMutex.RLock()
	defer fake.listModifiedFilesMutex.RUnlock()
	argsForCall := fake.listModifiedFilesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGitea) ListModifiedFilesReturns(result1 []string, result2 error) {
	fake.listModifiedFilesMutex.Lock()
	defer fake.listModifiedFilesMutex.Unlock()
	fake.ListModifiedFilesStub = nil
	fake.listModifiedFilesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeGitea) ListModifiedFilesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listModifiedFilesMutex.Lock()
	defer fake.listModifiedFilesMutex.Unlock()
	fake.ListModifiedFilesStub = nil
	if fake.listModifiedFilesReturnsOnCall == nil {
		fake.listModifiedFilesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listModifiedFilesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeGitea) ListPullRequests(arg1 gitea.StateType) ([]*resource.PullRequest, error) {
	fake.listPullRequestsMutex.Lock()
	ret, specificReturn := fake.listPullRequestsReturnsOnCall[len(fake.listPullRequestsArgsForCall)]
	fake.listPullRequestsArgsForCall = append(fake.listPullRequestsArgsForCall, struct {
		arg1 gitea.StateType
	}{arg1})
	stub := fake.ListPullRequestsStub
	fakeReturns := fake.listPullRequestsReturns
	fake.recordInvocation("ListPullRequests", []interface{}{arg1})
	fake.listPullRequestsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGitea) ListPullRequestsCallCount() int {
	fake.listPullRequestsMutex.RLock()
	defer fake.listPullRequestsMutex.RUnlock()
	return len(fake.listPullRequestsArgsForCall)
}

func (fake *FakeGitea) ListPullRequestsCalls(stub func(gitea.StateType) ([]*resource.PullRequest, error)) {
	fake.listPullRequestsMutex.Lock()
	defer fake.listPullRequestsMutex.Unlock()
	fake.ListPullRequestsStub = stub
}

func (fake *FakeGitea) ListPullRequestsArgsForCall(i int) gitea.StateType {
	fake.listPullRequestsMutex.RLock()
	defer fake.listPullRequestsMutex.RUnlock()
	argsForCall := fake.listPullRequestsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGitea) ListPullRequestsReturns(result1 []*resource.PullRequest, result2 error) {
	fake.listPullRequestsMutex.Lock()
	defer fake.listPullRequestsMutex.Unlock()
	fake.ListPullRequestsStub = nil
	fake.listPullRequestsReturns = struct {
		result1 []*resource.PullRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeGitea) ListPullRequestsReturnsOnCall(i int, result1 []*resource.PullRequest, result2 error) {
	fake.listPullRequestsMutex.Lock()
	defer fake.listPullRequestsMutex.Unlock()
	fake.ListPullRequestsStub = nil
	if fake.listPullRequestsReturnsOnCall == nil {
		fake.listPullRequestsReturnsOnCall = make(map[int]struct {
			result1 []*resource.PullRequest
			result2 error
		})
	}
	fake.listPullRequestsReturnsOnCall[i] = struct {
		result1 []*resource.PullRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeGitea) PostComment(arg1 string, arg2 string) error {
	fake.postCommentMutex.Lock()
	ret, specificReturn := fake.postCommentReturnsOnCall[len(fake.postCommentArgsForCall)]
	fake.postCommentArgsForCall = append(fake.postCommentArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.PostCommentStub
	fakeReturns := fake.postCommentReturns
	fake.recordInvocation("PostComment", []interface{}{arg1, arg2})
	fake.postCommentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitea) PostCommentCallCount() int {
	fake.postCommentMutex.RLock()
	defer fake.postCommentMutex.RUnlock()
	return len(fake.postCommentArgsForCall)
}

func (fake *FakeGitea) PostCommentCalls(stub func(string, string) error) {
	fake.postCommentMutex.Lock()
	defer fake.postCommentMutex.Unlock()
	fake.PostCommentStub = stub
}

func (fake *FakeGitea) PostCommentArgsForCall(i int) (string, string) {
	fake.postCommentMutex.RLock()
	defer fake.postCommentMutex.RUnlock()
	argsForCall := fake.postCommentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGitea) PostCommentReturns(result1 error) {
	fake.postCommentMutex.Lock()
	defer fake.postCommentMutex.Unlock()
	fake.PostCommentStub = nil
	fake.postCommentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitea) PostCommentReturnsOnCall(i int, result1 error) {
	fake.postCommentMutex.Lock()
	defer fake.postCommentMutex.Unlock()
	fake.PostCommentStub = nil
	if fake.postCommentReturnsOnCall == nil {
		fake.postCommentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.postCommentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitea) UpdateCommitStatus(arg1 string, arg2 string, arg3 string, arg4 string, arg5 string, arg6 string) error {
	fake.updateCommitStatusMutex.Lock()
	ret, specificReturn := fake.updateCommitStatusReturnsOnCall[len(fake.updateCommitStatusArgsForCall)]
	fake.updateCommitStatusArgsForCall = append(fake.updateCommitStatusArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 string
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.UpdateCommitStatusStub
	fakeReturns := fake.updateCommitStatusReturns
	fake.recordInvocation("UpdateCommitStatus", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.updateCommitStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitea) UpdateCommitStatusCallCount() int {
	fake.updateCommitStatusMutex.RLock()
	defer fake.updateCommitStatusMutex.RUnlock()
	return len(fake.updateCommitStatusArgsForCall)
}

func (fake *FakeGitea) UpdateCommitStatusCalls(stub func(string, string, string, string, string, string) error) {
	fake.updateCommitStatusMutex.Lock()
	defer fake.updateCommitStatusMutex.Unlock()
	fake.UpdateCommitStatusStub = stub
}

func (fake *FakeGitea) UpdateCommitStatusArgsForCall(i int) (string, string, string, string, string, string) {
	fake.updateCommitStatusMutex.RLock()
	defer fake.updateCommitStatusMutex.RUnlock()
	argsForCall := fake.updateCommitStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeGitea) UpdateCommitStatusReturns(result1 error) {
	fake.updateCommitStatusMutex.Lock()
	defer fake.updateCommitStatusMutex.Unlock()
	fake.UpdateCommitStatusStub = nil
	fake.updateCommitStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitea) UpdateCommitStatusReturnsOnCall(i int, result1 error) {
	fake.updateCommitStatusMutex.Lock()
	defer fake.updateCommitStatusMutex.Unlock()
	fake.UpdateCommitStatusStub = nil
	if fake.updateCommitStatusReturnsOnCall == nil {
		fake.updateCommitStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateCommitStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitea) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPullRequestMutex.RLock()
	defer fake.getPullRequestMutex.RUnlock()
	fake.listModifiedFilesMutex.RLock()
	defer fake.listModifiedFilesMutex.RUnlock()
	fake.listPullRequestsMutex.RLock()
	defer fake.listPullRequestsMutex.RUnlock()
	fake.postCommentMutex.RLock()
	defer fake.postCommentMutex.RUnlock()
	fake.updateCommitStatusMutex.RLock()
	defer fake.updateCommitStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGitea) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.Gitea = new(FakeGitea)
